import numpy as np
from glob import glob
import os
import cv2

path=(r"C:\Users\jayadeep\Desktop/cell_images")
print(os.listdir(path))

parasitized= glob(r'C:\Users\jayadeep\Desktop\cell_images\parasitized\*.png', recursive=True)
uninfected= glob(r'C:\Users\jayadeep\Desktop\cell_images\uninfected\*.png', recursive=True)

x=[]
y=[]
for img in uninfected:
  re_size_image = cv2.imread(img)
im = cv2.resize(re_size_image, (60, 60), interpolation=cv2.INTER_CUBIC)
x.append(im)
y.append(0)
for img in parasitized:
  re_size_image = cv2.imread(img)
im = cv2.resize(re_size_image, (60, 60), interpolation=cv2.INTER_CUBIC)
x.append(im)
y.append(1)
x = np.array(x)
y = np.array(y)

from sklearn.model_selection import train_test_split
x_train, x_valid, y_train, y_valid = train_test_split(x, y, test_size = 0.2, random_state =101)
x_train = x_train / 255.0
x_valid = x_valid / 255.0
from keras.utils import to_categorical
y1_train = to_categorical(y_train, num_classes = 2)
y1_valid = to_categorical(y_valid, num_classes = 2)

from keras.models import Sequential
import keras as keras
from keras.layers import Dense,Convolution2D,MaxPool2D,Dropout,Flatten,Batch
from keras.optimizers import RMSprop,Adam
from keras.layers.normalization import BatchNormalization
model = Sequential()
model = Sequential()
model.add(Convolution2D(32,(7,7),activation='relu'))
model.add(MaxPooling2D((2,2)))
model.add(BatchNormalization())
model.add(Dropout(0.25))
model.add(Convolution2D(64,(5,5),activation='relu'))
model.add(MaxPooling2D((2,2)))
model.add(BatchNormalization())
model.add(Dropout(0.25))
model.add(Convolution2D(128,(3,3),activation='relu'))
model.add(MaxPooling2D((2,2)))
model.add(BatchNormalization())
model.add(Dropout(0.25))
model.add(Convolution2D(128,(3,3),activation='relu'))
model.add(MaxPooling2D((2,2)))
model.add(BatchNormalization())
model.add(Dropout(0.25))
model.add(GlobalAveragePooling2D())
model.add(Dense(512, activation='relu'))
model.add(Dense(2,activation='softmax'))
model.compile(optimizer='adam', loss = 'categorical_crossentropy', metrics=['accuracy'])

hist = model.fit(x_train,y1_train,batch_size = 16, epochs = 5, verbose=1, validation_split=0.2)
