import numpy as np
from glob import glob
import os
import cv2

path=(r"C:\Users\jayadeep\Desktop/cell_images")
print(os.listdir(path))

parasitized= glob(r'C:\Users\jayadeep\Desktop\cell_images\parasitized\*.png', recursive=True)
uninfected= glob(r'C:\Users\jayadeep\Desktop\cell_images\uninfected\*.png', recursive=True)

x=[]
y=[]
for img in uninfected:
re_size_image = cv2.imread(img)
im = cv2.resize(re_size_image, (60, 60), interpolation=cv2.INTER_CUBIC)
x.append(im)
y.append(0)
for img in parasitized:
re_size_image = cv2.imread(img)
im = cv2.resize(re_size_image, (60, 60), interpolation=cv2.INTER_CUBIC)
x.append(im)
y.append(1)
x = np.array(x)
y = np.array(y)

from sklearn.model_selection import train_test_split
x_train, x_valid, y_train, y_valid = train_test_split(x, y, test_size = 0.2, random_state =101)
x_train = x_train / 255.0
x_valid = x_valid / 255.0
from keras.utils import to_categorical
y1_train = to_categorical(y_train, num_classes = 2)
y1_valid = to_categorical(y_valid, num_classes = 2)

from keras.preprocessing.image import ImageDataGenerator
train_datagen=ImageDataGenerator(rescale=1./255,validation_split=0.1)
train_generator=train_datagen.flow_from_directory(path,
target_size=(50,50),
batch_size=32,
class_mode='binary',
subset='training'
)
validation_generator=train_datagen.flow_from_directory(path,
target_size=(50,50),
batch_size=32,
class_mode='binary',
subset='validation'
)

model=Sequential()
model.add(Convolution2D(32,kernel_size=(7,7),input_shape=(50,50,3),activatio
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Convolution2D(64,kernel_size=(5,5),activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Convolution2D(128,kernel_size=(1,1),activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Convolution2D(256,kernel_size=(1,1),activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Convolution2D(512,kernel_size=(1,1),activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Flatten())
model.add(Dropout(0.5))
model.add(Dense(1024,activation='relu'))
model.add(Dense(1,activation='sigmoid'))

model.summary()

model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

history=model.fit_generator(train_generator,steps_per_epoch=16,epochs=20,validation_data=validation_generator,validation_steps=86)
